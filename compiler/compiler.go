package compiler

import (
	"fmt"
	"os"
	"github.com/mgill25/monkey-go/ast"
	"github.com/mgill25/monkey-go/code"
	"github.com/mgill25/monkey-go/object"
)

type Compiler struct {
	// internal fields - will be modified by .Compile() method.
	instructions code.Instructions // will hold the generated bytecode
	constants    []object.Object   // serves as our constant pool
}

func New() *Compiler {
	return &Compiler{
		instructions: code.Instructions{},
		constants:    []object.Object{},
	}
}

func (c *Compiler) emit(op code.Opcode, operands ...int) int {
	fmt.Printf("emit(): opcode: %v\n", op)
	fmt.Printf("emit(): operands: %+v\n", operands)
	ins := code.Make(op, operands...)
	fmt.Printf("emit(): instruction: %v\n", ins)
	pos := c.addInstruction(ins)
	fmt.Printf("emit(): returning pos=%d\n", pos)
	return pos
}

func (c *Compiler) addConstant(obj object.Object) int {
	fmt.Printf("addConstant(): Will add obj=%v to constants\n", obj)
	c.constants = append(c.constants, obj)
	return len(c.constants) - 1
}

func (c *Compiler) addInstruction(ins []byte) int {
	posNewInstruction := len(c.instructions)
	c.instructions = append(c.instructions, ins...)
	fmt.Printf("addInstruction(): added %v to instructions\n", ins)
	fmt.Printf("addInstruction(): c.instructions=%+v\n", c.instructions)
	return posNewInstruction
}

/*
Compile method: We pass the AST to the Compiler and produce Bytecode.
*/
func (c *Compiler) Compile(node ast.Node) error {
	fmt.Printf("Compile(): node=%v\n", node)
	switch node := node.(type) {
	case *ast.Program:
		fmt.Printf("Compile(): Got Program, will compile Statements\n")
		for _, s := range node.Statements {
			err := c.Compile(s)
			if err != nil {
				return err
			}
		}
	case *ast.ExpressionStatement:
		fmt.Printf("Compile(): Got ExpressionStatement, will compile Expression\n")
		err := c.Compile(node.Expression)
		if err != nil {
			return err
		}
	case *ast.InfixExpression:
		fmt.Printf("Compile(): Got InfixExpression, will compile Left\n")
		err := c.Compile(node.Left)
		if err != nil {
			return err
		}
		fmt.Printf("Compile(): Got InfixExpression, will compile Right\n")
		err = c.Compile(node.Right)
		if err != nil {
			return err
		}
		switch node.Operator {
		case "+":
			c.emit(code.OpAdd)
		default:
			return fmt.Errorf("unknown operator %s", node.Operator)
		}
	case *ast.IntegerLiteral:
		fmt.Printf("Compile(): Got IntegerLiteral, will call emit()\n")
		integer := &object.Integer{Value: node.Value}
		c.emit(code.OpConstant, c.addConstant(integer))
	default:
		fmt.Printf("What type is my node?")
	}
	return nil
}

func (c *Compiler) Bytecode() *Bytecode {
	return &Bytecode{
		Instructions: c.instructions,
		Constants:    c.constants,
	}
}

// Bytecode: What we will pass to the VM.
type Bytecode struct {
	Instructions code.Instructions
	Constants    []object.Object
}

// WriteBytecodeToFile writes the compiled bytecode to a file for inspection
func (c *Compiler) WriteBytecodeToFile(filename string) error {
	file, err := os.Create(filename)
	if err != nil {
		return fmt.Errorf("failed to create file: %v", err)
	}
	defer file.Close()

	bytecode := c.Bytecode()
	
	// Write instructions as hex dump with disassembly
	file.WriteString("=== INSTRUCTIONS ===\n")
	file.WriteString(fmt.Sprintf("Length: %d bytes\n", len(bytecode.Instructions)))
	file.WriteString(code.Instructions(bytecode.Instructions).String())
	file.WriteString("\n")
	
	// Write constants pool
	file.WriteString("=== CONSTANTS POOL ===\n")
	file.WriteString(fmt.Sprintf("Count: %d\n", len(bytecode.Constants)))
	for i, constant := range bytecode.Constants {
		file.WriteString(fmt.Sprintf("[%d] %T: %s\n", i, constant, constant.Inspect()))
	}
	
	return nil
}
